{
	"info": {
		"_postman_id": "40ef2cdf-35fe-4ee1-8607-18c48be50081",
		"name": "IMS8examples",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14726218"
	},
	"item": [
		{
			"name": "get postitions obstacles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response content\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.be.an('object');\r",
							"\r",
							"    const responseKeys = Object.keys(jsonData[0]);\r",
							"\r",
							"    // define the expected keys\r",
							"    const expectedKeys = ['position_horizontal', 'position_vertical', 'timestamp', 'id'];\r",
							"\r",
							"    // compare the extracted keys with the expected keys\r",
							"    const isKeysMatched = expectedKeys.every(key => responseKeys.includes(key));\r",
							"\r",
							"    // assert the test result\r",
							"    pm.expect(isKeysMatched).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{host}}/positions/obstacle",
					"host": [
						"{{host}}"
					],
					"path": [
						"positions",
						"obstacle"
					]
				}
			},
			"response": []
		},
		{
			"name": "get postitions mover",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response content\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.be.an('object');\r",
							"\r",
							"    const responseKeys = Object.keys(jsonData[0]);\r",
							"\r",
							"    // define the expected keys\r",
							"    const expectedKeys = ['position_horizontal', 'position_vertical', 'timestamp', 'id'];\r",
							"\r",
							"    // compare the extracted keys with the expected keys\r",
							"    const isKeysMatched = expectedKeys.every(key => responseKeys.includes(key));\r",
							"\r",
							"    // assert the test result\r",
							"    pm.expect(isKeysMatched).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{host}}/positions/mover",
					"host": [
						"{{host}}"
					],
					"path": [
						"positions",
						"mover"
					]
				}
			},
			"response": []
		},
		{
			"name": "create positions obstacles",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response content\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"\r",
							"    const responseKeys = Object.keys(jsonData);\r",
							"\r",
							"    // define the expected keys\r",
							"    const expectedKeys = ['id'];\r",
							"\r",
							"    // compare the extracted keys with the expected keys\r",
							"    const isKeysMatched = expectedKeys.every(key => responseKeys.includes(key));\r",
							"\r",
							"    // assert the test result\r",
							"    pm.expect(isKeysMatched).to.be.true;\r",
							"    pm.collectionVariables.set(\"positionid\", jsonData.id);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "position_horizontal",
							"value": "1.3",
							"type": "text"
						},
						{
							"key": "position_vertical",
							"value": "1.0",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}/positions/obstacle",
					"host": [
						"{{host}}"
					],
					"path": [
						"positions",
						"obstacle"
					]
				}
			},
			"response": []
		},
		{
			"name": "create positions mover",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response content\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"\r",
							"    const responseKeys = Object.keys(jsonData);\r",
							"\r",
							"    // define the expected keys\r",
							"    const expectedKeys = ['id'];\r",
							"\r",
							"    // compare the extracted keys with the expected keys\r",
							"    const isKeysMatched = expectedKeys.every(key => responseKeys.includes(key));\r",
							"\r",
							"    // assert the test result\r",
							"    pm.expect(isKeysMatched).to.be.true;\r",
							"    pm.collectionVariables.set(\"positionid\", jsonData.id);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "position_horizontal",
							"value": "1.3",
							"type": "text"
						},
						{
							"key": "position_vertical",
							"value": "1.0",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}/positions/mover",
					"host": [
						"{{host}}"
					],
					"path": [
						"positions",
						"mover"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload a picture",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response content\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"\r",
							"    const responseKeys = Object.keys(jsonData);\r",
							"\r",
							"    // define the expected keys\r",
							"    const expectedKeys = ['id', 'url'];\r",
							"\r",
							"    // compare the extracted keys with the expected keys\r",
							"    const isKeysMatched = expectedKeys.every(key => responseKeys.includes(key));\r",
							"\r",
							"    // assert the test result\r",
							"    pm.expect(isKeysMatched).to.be.true;\r",
							"    pm.collectionVariables.set(\"pictureid\", jsonData.id);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/C:/CookiieZ/sauer.png"
						},
						{
							"key": "positionid",
							"value": "{{positionid}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}/upload",
					"host": [
						"{{host}}"
					],
					"path": [
						"upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "create an event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response content\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"\r",
							"    const responseKeys = Object.keys(jsonData);\r",
							"\r",
							"    // define the expected keys\r",
							"    const expectedKeys = ['id'];\r",
							"\r",
							"    // compare the extracted keys with the expected keys\r",
							"    const isKeysMatched = expectedKeys.every(key => responseKeys.includes(key));\r",
							"\r",
							"    // assert the test result\r",
							"    pm.expect(isKeysMatched).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "image_id",
							"value": "{{pictureid}}",
							"type": "text"
						},
						{
							"key": "event_code",
							"value": "1020",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{host}}/events",
					"host": [
						"{{host}}"
					],
					"path": [
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all events",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct response content\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0]).to.be.an('object');\r",
							"\r",
							"    const responseKeys = Object.keys(jsonData[0]);\r",
							"\r",
							"    // define the expected keys\r",
							"    const expectedKeys = ['image_id', 'timestamp', 'message', 'id'];\r",
							"\r",
							"    // compare the extracted keys with the expected keys\r",
							"    const isKeysMatched = expectedKeys.every(key => responseKeys.includes(key));\r",
							"\r",
							"    // assert the test result\r",
							"    pm.expect(isKeysMatched).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/events",
					"host": [
						"{{host}}"
					],
					"path": [
						"events"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "positionid",
			"value": "null",
			"type": "string"
		},
		{
			"key": "host",
			"value": "https://ims8.herokuapp.com",
			"type": "string",
			"disabled": true
		},
		{
			"key": "host",
			"value": "localhost:8080",
			"type": "string"
		},
		{
			"key": "pictureid",
			"value": "null",
			"type": "string"
		}
	]
}